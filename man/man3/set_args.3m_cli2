." Text automatically generated by txt2man
.TH "set_args" "3m_cli2" "August 31, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBset_args(3f) \fP- [ARGUMENTS:M_CLI2] command line argument parsing
\fB(LICENSE:PD)
\fB
.SH SYNOPSIS
.nf
.fam C
subroutine \fBset_args\fP(definition,help_text,version_text)
.PP
.nf
.fam C
     character(len=*),intent(in),optional :: definition
     character(len=:),intent(in),allocatable,optional :: help_text
     character(len=:),intent(in),allocatable,optional :: version_text
.fam T
.fi
.fam T
.fi
.SH DESCRIPTION

\fBSET_ARGS\fP(3f) requires a unix-like command prototype for defining
arguments and default command-line options. Argument values are then
read using \fBGET_ARGS\fP(3f).
.PP
The \fB--help\fP and \fB--version\fP options require the optional
help_text and version_text values to be provided.
.SH OPTIONS

.TP
.B DESCRIPTION
composed of all command arguments concatenated
into a Unix-like command prototype string. For
example:
.PP
.nf
.fam C
                     call set_args('-L F -ints 10,20,30 -title "my title" -R 10.3')

.fam T
.fi
.RS
DESCRIPTION is pre-defined to act as if started with the reserved
options '\fB--usage\fP F \fB--help\fP F \fB--version\fP F'. The \fB--usage\fP
option is processed when the \fBset_args\fP(3f)
routine is called. The same is true for \fB--help\fP and \fB--version\fP
if the optional help_text and version_text options are
provided.
.PP
see "DEFINING THE PROTOTYPE" in the next section for further
details.
.RE
.TP
.B HELP_TEXT
if present, will be displayed if program is called with
\fB--help\fP switch, and then the program will terminate. If
not supplied, the command line initialization string will be
shown when \fB--help\fP is used on the commandline.
.TP
.B VERSION_TEXT
if present, will be displayed if program is called with
\fB--version\fP switch, and then the program will terminate.
.SH DEFINING THE PROTOTYPE
.IP \(bu 3
all keywords on the prototype get a value.
.IP \(bu 3
logicals must be set to F or T.
.IP \(bu 3
strings MUST be delimited with double-quotes and
must be at least one space. Internal double-quotes
are represented with two double-quotes
.IP \(bu 3
numeric keywords are not allowed; but this allows
negative numbers to be used as values.
.IP \(bu 3
lists of values should be comma-delimited unless a
user-specified delimiter is used. The prototype
must use the same array delimiters as the call to
the family of get_args*(3f) called.
.IP \(bu 3
long names (\fB--keyword\fP) should be all lowercase
.IP \(bu 3
to define a zero-length allocatable array make the
value a delimiter (usually a comma).
.IP \(bu 3
If the prototype ends with "--" a special mode is turned
on where anything after "--" on input goes into the
variable REMAINING instead of becoming elements in the
UNNAMED array. This is not needed for normal processing.
.SH USAGE
When invoking the program line note that (subject to change) the
following variations from other common command-line parsers:
.RS
.IP \(bu 3
long names do not take the \fB--KEY\fP=VALUE form, just
\fB--KEY\fP VALUE; and long names should be all lowercase and
always more than one character.
.IP \(bu 3
values for duplicate keywords are appended together with a space
separator when a command line is executed.
.IP \(bu 3
numeric keywords are not allowed; but this allows
negative numbers to be used as values.
.IP \(bu 3
mapping of short names to long names is demonstrated in
the manpage for \fBSPECIFIED\fP(3f).
.RS
.PP
Specifying both names of an equivalenced keyword will have
undefined results (currently, their alphabetical order
will define what the Fortran variable values become).
.PP
The second of the names should only be called with a
GET_ARGS*(3f) routine if the \fBSPECIFIED\fP(3f) function is .TRUE.
for that name.
.PP
Note that allocatable arrays cannot be EQUIVALENCEd in Fortran.
.RE
.IP \(bu 3
short keywords cannot be combined. \fB-a\fP \fB-b\fP \fB-c\fP is required,
not \fB-abc\fP even for Boolean keys.
.IP \(bu 3
shuffling is not supported. Values should follow their
keywords.
.IP \(bu 3
if a parameter value of just "-" is supplied it is
converted to the string "stdin".
.IP \(bu 3
values not matching a keyword go into the character
array "UNUSED".
.IP \(bu 3
if the keyword "--" is encountered the rest of the
command arguments go into the character array "UNUSED".
.SH EXAMPLE

Sample program:
.PP
.nf
.fam C
    program demo_set_args
    use M_CLI2,  only : filenames=>unnamed, set_args, get_args, unnamed
    use M_CLI2,  only : get_args_fixed_size
    implicit none
    integer                      :: i
    !
    ! DEFINE ARGS
    real                         :: x, y, z
    real                         :: p(3)
    character(len=:),allocatable :: title
    logical                      :: l, lbig
    integer,allocatable          :: ints(:)
    !
    !  DEFINE COMMAND (TO SET INITIAL VALUES AND ALLOWED KEYWORDS)
    !  AND READ COMMAND LINE
    call set_args(' &
       ! reals
       & -x 1 -y 2.3 -z 3.4e2 &
       ! integer array
       & -p -1,-2,-3 &
       ! always double-quote strings
       & --title "my title" &
       ! set all logical values to F or T.
       & -l F -L F &
       ! set allocatable size to zero if you like by using a delimiter
       & -ints , &
       ! string should be a single character at a minimum
       & --label " " &
       & ')
    ! ASSIGN VALUES TO ELEMENTS
    !     SCALARS
    call get_args('x',x)
    call get_args('y',y)
    call get_args('z',z)
    call get_args('l',l)
    call get_args('L',lbig)
    call get_args('ints',ints)      ! ALLOCATABLE ARRAY
    call get_args('title',title)    ! ALLOCATABLE STRING
    call get_args_fixed_size('p',p) ! NON-ALLOCATABLE ARRAY
    ! USE VALUES
    write(*,*)'x=',x
    write(*,*)'y=',y
    write(*,*)'z=',z
    write(*,*)'p=',p
    write(*,*)'title=',title
    write(*,*)'ints=',ints
    write(*,*)'l=',l
    write(*,*)'L=',lbig
    ! UNNAMED VALUES
    if(size(filenames).gt.0)then
       write(*,'(i6.6,3a)')(i,'[',filenames(i),']',i=1,size(filenames))
    endif
    end program demo_set_args

.fam T
.fi
.SH AUTHOR
John S. Urban, 2019
.SH LICENSE
Public Domain
