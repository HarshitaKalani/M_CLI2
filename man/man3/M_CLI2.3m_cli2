." Text automatically generated by txt2man
.TH "M_CLI2" "3m_cli2" "August 03, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBM_CLI2(3fm) \fP- [ARGUMENTS::M_CLI2] - command line argument parsing using a prototype command
\fB(LICENSE:PD)
.SH SYNOPSIS
.nf
.fam C

\fBuse\fP M_CLI2, \fIonly\fP : set_args, get_args, \fIunnamed\fP ! \fIargument\fP \fItype\fP \fIconversion\fP
.fam T
.fi
.SH DESCRIPTION
Allow for command line parsing much like standard Unix command line
parsing using a simple prototype.
.PP
In this method a call is made to obtain the value for each \fIargument\fP.
.SH EXAMPLE

Sample program using \fItype\fP \fIconversion\fP routines
.PP
.nf
.fam C
    program demo_M_CLI2
    use M_CLI2,  only : filenames=>unnamed, set_args, get_args
    implicit none
    integer                      :: i
    integer,parameter            :: dp=kind(0.0d0)
    !
    ! DEFINE ARGS
    real                         :: x, y, z
    real                         :: p(3)
    real(kind=dp),allocatable    :: point(:)
    character(len=:),allocatable :: title
    character(len=40)            :: label
    logical                      :: l, lbig
    logical,allocatable          :: logicals(:)
    logical                      :: logi(3)
    !
    ! DEFINE AND PARSE (TO SET INITIAL VALUES) COMMAND LINE
    !   o only quote strings
    !   o set all logical values to F or T.
    call set_args('                         &
            & -x 1 -y 2 -z 3                &
            & -p -1 -2 -3                   &
            & --point 11.11, 22.22, 33.33e0 &
            & --title "my title" -l F -L F  &
            & --logicals  F F F F F         &
            & -logi F T F                   &
            ! note space between quotes is required
            & --label " " &
            & ')
    ! ASSIGN VALUES TO ELEMENTS
    call get_args('x',x)         ! SCALARS
    call get_args('y',y)
    call get_args('z',z)
    call get_args('l',l)
    call get_args('L',lbig)
    call get_args('title',title) ! ALLOCATABLE STRING
    call get_args('point',point) ! ALLOCATABLE ARRAYS
    call get_args('logicals',logicals)
    !
    ! for NON-ALLOCATABLE VARIABLES
    call get_args('label',label,len(label)) ! for non-allocatable string pass length
    call get_args('p',p,size(p))            ! for non-allocatable arrays pass size
    call get_args('logi',logi,size(logi))
    !
    ! USE VALUES
    write(*,*)'x=',x, 'y=',y, 'z=',z, x+y+z
    write(*,*)'p=',p
    write(*,*)'point=',point
    write(*,*)'title=',title
    write(*,*)'label=',label
    write(*,*)'l=',l
    write(*,*)'L=',lbig
    write(*,*)'logicals=',logicals
    write(*,*)'logi=',logi
    !
    ! unnamed strings
    !
    if(size(filenames).gt.0)then
       write(*,'(i6.6,3a)')(i,'[',filenames(i),']',i=1,size(filenames))
    endif
    !
    end program demo_M_CLI2

.fam T
.fi
.SH AUTHOR
John S. Urban, 2019
.SH LICENSE
Public Domain
